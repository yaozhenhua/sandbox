/*
 * Sample code to read a registry dump of DHCP options and parse the payload.
 */
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;

class Test
{
    static Int64 GetInt64(byte[] data, int offset)
    {
        Int64 r = data[offset + 7];
        for (int i = 6; i >= 0; i--)
        {
            r = (r << 8) | data[offset + i];
        }
        return r;
    }

    static Int32 GetInt32(byte[] data, int offset)
    {
        Int32 r = data[offset + 3];
        for (int i = 2; i >= 0; i--)
        {
            r = (r << 8) | data[offset + i];
        }
        return r;
    }

    static byte[] GetData(byte[] data, int offset, int length)
    {
        var r = new byte[length];
        Array.Copy(data, offset, r, 0, length);
        return r;
    }

    static byte[] ReadRegistry(string filename)
    {
        var sb = new StringBuilder();
        bool continueLine = false;
        foreach (string line in File.ReadAllLines(filename)) {
            if (line.Contains("DhcpInterfaceOptions")) {
                sb.Append(line.Trim().Replace("\\", ""));
            }
            else if (sb.Length > 0 && continueLine) {
                sb.Append(line.Trim().Replace("\\", ""));
            }

            if (line.EndsWith("\\")) {
                continueLine = true;
            }
            else if (sb.Length > 0) {
                break;
            }
        }

        string opt = sb.ToString();
        var hex = opt.Substring(opt.IndexOf("hex:") + 4).Split(new char[] { ',' });

        var data = new byte[hex.Length];
        for (int i = 0; i < hex.Length; i++) {
            data[i] = Byte.Parse(hex[i], System.Globalization.NumberStyles.HexNumber);
        }

        return data;
    }

    static void Main(string[] args)
    {
        var optionTable = new Dictionary<Int64, string> {
            { 1, "Subnet Mask" },
            { 3, "Router" },
            { 6, "DNS" },
            { 15, "Domain Name" },
            { 31, "Router discovery" },
            { 33, "Static Route" },
            { 43, "Vendor specific info" },
            { 44, "NetBIOS over TCP/IP name server" },
            { 46, "NetBIOS over TCP/IP node type" },
            { 47, "NetBIOS over TCP/IP scope" },
            { 51, "IP address lease time" },
            { 53, "DHCP message type" },
            { 54, "Server ID" },
            { 58, "renew time" },
            { 59, "Rebinding time" },
            { 245, "private" },
            { 252, "private" },
        };

        byte[] dhcpOptions;

        if (args.Length > 0) {
            dhcpOptions = ReadRegistry(args[0]);
        }
        else {
            dhcpOptions = new byte[] {
            /*
            0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x09,0x57,0x2c,0x55,

            0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0x0a,0x3b,0xc2,0x01,

            0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

            0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

            0x3a,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,

            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,

            0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0x72,0x65,0x64,0x64, 0x6f,0x67,0x2e,0x6d,0x69,0x63,0x72,0x6f,
            0x73,0x6f,0x66,0x74,0x2e,0x63,0x6f,0x6d,

            0xf5,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0x0a,0x3b,0xc2,0x1c,

            0x06,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0x0a,0x14,0xde,0x63, 0x0a,0x14,0xdd,0x3c,0x0a,0x14,0xe6,0x13,
            0x0a,0x14,0xf2,0x59,

            0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0x0a,0x3b,0xc0,0x43,

            0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00, 0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0x05,0x00,0x00,0x00
            */
            0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x7f,0x8d,0xf1,0x56,0x2f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x7f,0x8d,0xf1,0x56,0x2e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x8d,0xf1,0x56,0x2c,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x8d,0xf1,0x56,
            0x2b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x7f,0x8d,0xf1,0x56,0x21,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x7f,0x8d,0xf1,0x56,0x1f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0x8d,0xf1,0x56,0x01,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
            0xff,0xff,0xfe,0x00,0x03,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x0a,0x40,0x0e,0x01,0x06,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,
            0xac,0x11,0x16,0x0b,0xac,0x11,0x16,0x0c,0x0f,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x14,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x72,0x65,0x64,0x64,
            0x6f,0x67,0x2e,0x6d,0x69,0x63,0x72,0x6f,0x73,0x6f,0x66,0x74,0x2e,0x63,0x6f,0x6d,
            0x33,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x35,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x01,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0x05,0x00,0x00,0x00,
            0x36,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xa8,0x3f,0x81,0x10,0x3a,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,
            0x3b,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xf5,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xff,0xa8,0x3f,0x81,0x10,
            };
        }

        int offset = 0;
        while (offset < dhcpOptions.Length)
        {
            Int64 optionCode = GetInt64(dhcpOptions, offset);
            offset += 8;

            Int32 optionLength = GetInt32(dhcpOptions, offset);
            offset += 4;

            offset += 8;

            Console.WriteLine("Option {0} Length {1} - {2}",
                    optionCode, optionLength,
                    optionTable.ContainsKey(optionCode) ? optionTable[optionCode] : " - ");

            if (optionLength == 0)
            {
                continue;
            }

            byte[] data = GetData(dhcpOptions, offset, optionLength);
            offset += (optionLength + 3) / 4 * 4;

            if (optionCode == 245)
            {
                var ip = new IPAddress(data);
                Console.WriteLine("IP Address: {0}", ip);
            }
            else
            {
                Console.WriteLine("    {0}", string.Join(" ", data.Select(d => d.ToString("X2"))));
            }
        }
    }
}
